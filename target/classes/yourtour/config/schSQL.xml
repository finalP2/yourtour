<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="schedule">

	<resultMap type="schedule" id="scheduleRes">
	
		<result property="m_email" column="m_email" />
		<result property="a_no" column="a_no" />
		<result property="a_addr" column="a_addr"/>
		<result property="a_tel" column="a_tel" />
		<result property="a_way" column="a_way" />
		<result property="a_img_sav" column="a_img_sav"/>
		<result property="a_cate" column="a_cate"/>
		<result property="s_complete" column="s_complete"/>
		<result property="s_state" column="s_state" />
		
		<!-- SCH 테이블 -->
		<result property="s_no" column="s_no" />
		<result property="s_date" column="s_date" />
		<result property="s_start_date" column="s_start_date" />
		<result property="s_end_date" column="s_end_date" />
		<result property="s_hit" column="s_hit" />
		<result property="s_private" column="s_private" />
		<result property="s_together" column="s_together" />
		<result property="s_name" column="s_name" />
		
		<!-- SCH_DETAIL 테이블 -->
		<result property="s_detail_no" column="s_detail_no" />
		<result property="s_detail_memo" column="s_detail_memo" />
		<result property="s_idx" column="s_idx" />
		<result property="s_detail_turn" column="s_detail_turn"/>
		
		<result property="a_name" column="a_name"/>

	</resultMap>
	
	<resultMap type="schComment" id="schCommentRes">
		<result property="s_no" column="s_no" />
		<result property="m_email" column="m_email" />
		<result property="s_co_no" column="s_co_no" />
		<result property="s_co_con" column="s_co_con" />
		<result property="s_co_date" column="s_co_date" />
	</resultMap>
	
	<!-- 여행지 추가 -->
	<insert id="insertArea" parameterType="schedule">
		INSERT INTO SCH_DETAIL(S_DETAIL_NO, A_NO, S_IDX, S_NO, S_DETAIL_TURN)
		VALUES(S_DETAIL_NO_SEQ.NEXTVAL, ${a_no}, ${s_idx}, ${s_no},
		(SELECT NVL(MAX(S_DETAIL_TURN)+1,1) FROM SCH_DETAIL WHERE s_no = ${s_no} and s_idx = ${s_idx}))
	</insert>
	
	<!-- 여행지 삭제 -->
	<delete id="deleteArea" parameterType="schedule">
		DELETE FROM sch_detail 
		WHERE S_NO = #{s_no} and a_no = #{a_no} and s_idx = #{s_idx} and s_detail_turn = #{s_detail_turn}
	</delete>
	
	<!-- 여행지 메모 쓰기 -->
	<update id="writeMemo" parameterType="schedule" >
		UPDATE sch_detail
		SET s_detail_memo = #{s_detail_memo}
  		where s_detail_no = #{s_detail_no}
	</update>
	
	<!-- 다음 순서 한줄 검색 -->
	<select id="selectNextTurn" resultMap="scheduleRes" parameterType="schedule">
		select s_detail_no, s_detail_turn from SCH_DETAIL
  		where S_DETAIL_TURN = 
  		(select next_turn from 
  			(select s_no,a_no,S_DETAIL_TURN, LEAD(S_DETAIL_TURN) OVER (ORDER BY S_DETAIL_TURN ASC) next_turn from  sch_detail where s_no = #{s_no} and s_idx = #{s_idx})
  		where s_detail_turn = #{s_detail_turn} and s_idx = #{s_idx})
  		and s_no = #{s_no}
	</select>
	<!-- 이전 순서 한줄 검색 -->
	<select id="selectPreTurn" resultMap="scheduleRes" parameterType="schedule">
		select s_detail_no, s_detail_turn from SCH_DETAIL
  		where S_DETAIL_TURN = 
  		(select next_turn from 
  			(select s_no,a_no,S_DETAIL_TURN, LAG(S_DETAIL_TURN) OVER (ORDER BY S_DETAIL_TURN ASC) next_turn from  sch_detail where s_no = #{s_no} and s_idx = #{s_idx})
  		where s_detail_turn = #{s_detail_turn} and s_idx = #{s_idx})
  		and s_no = #{s_no}
	</select>
	<!-- 여행지 순서 변경 -->
	<update id="preTurnUp" parameterType="HashMap">
		UPDATE sch_detail
		SET s_detail_turn = #{turn}
  		where s_no = #{s_no} and s_detail_turn=#{s_detail_turn} and s_idx = #{s_idx}
	</update>
	<!-- 여행지 순서 변경 -->
	<update id="nextTurnDown" parameterType="HashMap">
		UPDATE sch_detail
		SET s_detail_turn = #{s_detail_turn}
  		where s_no = #{s_no} and s_detail_no=#{s_detail_no} and s_idx = #{s_idx}
	</update>
	
	<!-- 일정 게시판 글 쓰기 -->
	<insert id="scheduleWrite" parameterType="schedule">
		INSERT INTO SCH(S_NO, M_EMAIL, S_START_DATE, S_END_DATE, S_PRIVATE, S_NAME)
		VALUES(S_NO_SEQ.NEXTVAL, #{m_email}, TO_DATE(#{s_start_date}, 'yyyy-mm-dd'), TO_DATE(#{s_end_date}, 'yyyy-mm-dd'), #{s_private}, #{s_name})
	</insert>
	
	<!-- 일정 공유 -->
	<insert id="scheduleShare" parameterType="String">
		INSERT INTO SCH_share(S_NO, s_together)
		VALUES(S_NO_SEQ.currval, #{s_together})
	</insert>
	
	<!-- 일정 공유 친구 목록 -->
	<select id="togetherList" resultMap="scheduleRes" parameterType="Integer">
		SELECT *
		FROM sch_share
   		where s_no = #{s_no} and s_state in(0,1)
   		order by s_state desc
	</select>
	
	<!-- 일정 완성 -->
	<update id="scheduleComplete" parameterType="HashMap">
		UPDATE SCH
		SET
			S_COMPLETE = 1
		WHERE
			S_NO = #{s_no}
	</update>
	
	<!-- 일정 완성시 장소 카운트 +1씩 -->
	<update id="scheduleCompleteCount" parameterType="int">
		update area
		set a_count=a_count+1
		where a_no in (select a.a_no
						from AREA a, SCH_DETAIL b
						where a.A_NO=b.A_NO and s_no= #{s_no})
	</update>
	
	<!-- 일별 여행지 검색 -->
	<select id="scheduleAreaList" resultMap="scheduleRes" parameterType="schedule">
		select *
		from sch_detail inner join area
		using(a_no)
		where s_no = #{s_no} and s_idx = #{s_idx}
		order by s_detail_turn asc
	</select>
	
	<!-- 미완성 스케줄 리스트 -->
	<select id="scheduleIncompleteList" resultMap="scheduleRes" parameterType="String">
		select *
		from sch
		where m_email = #{m_email} and s_complete = 0
	</select>
	
	<!-- 일정 게시판 가장 최근에 쓴 글 검색 -->
	<select id="scheduleLastWrite" resultMap="scheduleRes" parameterType="String">
		select s_no, s_name, m_email, TO_CHAR(s_start_date, 'yyyy-mm-dd') s_start_date, TO_CHAR(s_end_date, 'yyyy-mm-dd') s_end_date
		from sch 
		where s_no = (select max(s_no) from sch) and m_email = #{m_email}
	</select>
	
	<!-- 일정 번호와 세션 아이디로 글 검색-->
	<select id="scheduleWriteSelect" resultMap="scheduleRes" parameterType="schedule">
		select s_no, s_name, m_email, TO_CHAR(s_start_date, 'yyyy-mm-dd') s_start_date, TO_CHAR(s_end_date, 'yyyy-mm-dd') s_end_date,
		s_end_date-s_start_date s_idx
		from sch 
		where s_no = #{s_no}
	</select>
	
	<!-- 일정 게시판 ↓↓↓↓ -->
	<!-- 공통으로 사용할 select절 정의 -->
	<sql id="select-all-list">
		SELECT S_NO,M_EMAIL,S_START_DATE,S_HIT,S_NAME,STATE_NAME AS S_DETAIL_MEMO,A_IMG_SAV AS S_TOGETHER FROM
		(SELECT * FROM
		(SELECT S_END_DATE - S_START_DATE AS S_START_DATE, S_NO FROM SCH) INNER JOIN
		(SELECT S_NO,M_EMAIL,S_HIT,S_NAME,S_PRIVATE,S_COMPLETE FROM SCH)
		USING(S_NO) WHERE S_PRIVATE = 0 AND S_COMPLETE=1)
		INNER JOIN
		(
		SELECT A_IMG_SAV,S_NO,A_NO,C_NO,STATE_NAME
		FROM
		(SELECT * FROM
		(SELECT A_IMG_SAV,S_NO,A_NO FROM AREA_IMG INNER JOIN
		(SELECT A_NO,S_NO FROM SCH_DETAIL
		WHERE S_IDX=1 AND S_DETAIL_TURN=1)
		USING(A_NO) WHERE A_IMG_INDEX=1)
		INNER JOIN AREA USING(A_NO)
		) INNER JOIN 
		(SELECT * FROM CITY INNER JOIN STATE
		USING(STATE_NO))USING(C_NO)
		)
		USING(S_NO)
	</sql>
	
	<!-- 일정 게시판 리스트 보기 -->
	<select id="scheduleList" resultMap="scheduleRes">
		<include refid="select-all-list" />
		ORDER BY S_NO DESC
	</select>
	
	<!-- 일정 게시판에서 출발지역으로 검색해서 리스트 보기 -->
	<select id="scheduleSearchList" resultMap="scheduleRes" parameterType="String">
		<include refid="select-all-list" />
		WHERE STATE_NAME = #{state_name}
		ORDER BY S_NO DESC
	</select>
	
	<!-- 메인에서 인기 조회수 일정 리스트 불러오기 -->
	<select id="scheduleHitList" resultMap="scheduleRes">
		<include refid="select-all-list" />
		ORDER BY S_HIT DESC
	</select>
	
	<!-- 일정 게시판 리스트 보기 / 조회수 순으로 보기 -->
	<select id="scheduleZzimList" resultMap="scheduleRes">
		<include refid="select-all-list" />
		ORDER BY S_HIT DESC
	</select>
	
	<!-- 일정게시판 글 상세보기- 헤더 -->
	<select id="scheduleDetail" resultMap="scheduleRes" parameterType="Integer">
		SELECT s_no, s_name, m_email, TO_CHAR(s_start_date, 'yyyy-mm-dd') s_start_date, TO_CHAR(s_end_date, 'yyyy-mm-dd') s_end_date,s_hit,s_private
		FROM SCH
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 일정게시판 글 상세보기/DAY선택 -->
	<select id="schDetail" resultMap="scheduleRes" parameterType="Integer">
		SELECT DISTINCT S_IDX FROM SCH_DETAIL
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 일정게시판 글 상세보기/DAY별 일정리스트 -->
	<select id="dayList" resultMap="scheduleRes" parameterType="HashMap">	
		SELECT S_NO,S_DETAIL_NO,S_DETAIL_MEMO,A_NO,S_IDX,S_DETAIL_TURN,A_IMG_SAV AS S_TOGETHER, A_NAME, A_ADDR, A_TEL, A_WAY
		FROM SCH_DETAIL INNER JOIN (SELECT * FROM AREA_IMG INNER JOIN AREA USING(A_NO))
		USING(A_NO)
		WHERE S_IDX = #{s_idx} AND S_NO = #{s_no} AND A_IMG_INDEX = 1
		ORDER BY S_DETAIL_TURN ASC
	</select>
	
	<!-- 일정상세보기에서 일정수정하기 누를때 일정 제일 마지막꺼 값 보내기 / S_IDX -->
	<select id="selectS_idx" resultMap="scheduleRes" parameterType="Integer">
		SELECT MAX(S_IDX) AS S_IDX FROM SCH_DETAIL
		WHERE S_NO = #{s_no}
	</select> 
	
	<!-- 일정상세보기에서 일정수정하기 누를때 일정 제일 마지막꺼 값 보내기 / STATE_NO, C_NO -->
	<select id="selectStateCity" resultMap="scheduleRes" parameterType="Integer">
		SELECT STATE_NO AS S_NO, C_NO AS A_NO FROM STATE INNER JOIN CITY
		USING(STATE_NO)
		WHERE C_NO = (SELECT C_NO FROM CITY INNER JOIN AREA
						USING(C_NO)
						WHERE A_NO IN (SELECT MAX(A_NO) AS A_NO
										FROM SCH_DETAIL
										WHERE S_IDX IN (SELECT MAX(S_IDX)
														FROM SCH_dETAIL WHERE S_NO = #{s_no})
										AND S_NO = #{s_no})
						)
	</select> 
	
	<!-- 일정 삭제하기 -->
	<select id="deleteSchedule" parameterType="Integer">
		DELETE FROM SCH
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 지도에 마커로 표시할 여행지 리스트 불러오기 -->
	<select id="mapList" resultMap="scheduleRes" parameterType="Integer">
		SELECT A_NO,A_NAME,A_CATE,A_ADDR,S_IDX FROM SCH_DETAIL INNER JOIN AREA
		USING(A_NO)
		WHERE S_NO = #{s_no}
		ORDER BY s_idx asc, S_DETAIL_TURN asc
	</select>
	
	<!-- 해당 스케쥴의 여행지 개수 불러오기 -->
	<select id="areaCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM SCH_DETAIL
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 다른사람 일정디테일을 불러오기 -->
	<select id="schDetailList" parameterType="Integer" resultMap="scheduleRes">
		SELECT * FROM SCH_DETAIL
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 다른사람 일정을 내 일정으로 가져오기 -->
	<insert id="schDownload" parameterType="schedule">
		INSERT INTO SCH(S_NO,M_EMAIL,S_DATE,S_START_DATE,S_END_DATE,S_PRIVATE,S_NAME)
		VALUES(S_NO_SEQ.NEXTVAL,#{m_email},SYSDATE,TO_DATE(#{s_start_date}, 'yyyy-mm-dd'), TO_DATE(#{s_end_date}, 'yyyy-mm-dd'),1,#{s_name})
	</insert>
	
	<!-- 다른사람 일정 새 일정으로 넣은 s_no 가져오기 -->
	<select id="selectCurrval" resultType="Integer">
		SELECT MAX(S_NO) FROM SCH 
	</select>
	
	<!-- 다른사람 일정디테일을 내 일정으로 가져오기 -->
	<insert id="schDownDetail">
		INSERT INTO SCH_DETAIL(S_NO,S_DETAIL_NO,S_DETAIL_MEMO,A_NO,S_IDX,S_DETAIL_TURN)
		VALUES(#{s_no},S_DETAIL_NO_SEQ.NEXTVAL,'',#{a_no},#{s_idx},#{s_detail_turn})
	</insert>
	
	<!-- 찜 했는지 확인하기 -->
	<select id="zzimCheck" parameterType="HashMap" resultType="Integer">
		SELECT COUNT(*) FROM SCH_ZZIM
		WHERE M_EMAIL = #{m_email} AND S_NO = #{s_no}
	</select>
	
	<!-- 찜하기 -->
	<insert id="schZzim1" parameterType="HashMap">
		INSERT INTO SCH_ZZIM(M_EMAIL, S_NO)
		VALUES(#{m_email}, #{s_no})
	</insert>
	
	<!-- 찜 해제 -->
	<delete id="schZzim2" parameterType="HashMap">
		DELETE FROM SCH_ZZIM
		WHERE M_EMAIL = #{m_email} AND S_NO = #{s_no}
	</delete>
	
	<!-- 일정 공유중인 회원 이메일 리스트 불러오기 -->
	<select id="s_together" parameterType="Integer" resultMap="scheduleRes">
		SELECT S_TOGETHER 
		FROM SCH_SHARE
		WHERE S_NO = #{s_no} AND S_STATE = 1
	</select>
	
	<!-- 조회수 증가 -->
	<update id="scheduleUpdateReadhit" parameterType="Integer">
		UPDATE SCH
		SET
			S_HIT = S_HIT + 1
		WHERE
			S_NO = #{s_no}
	</update>
	
	<!-- 댓글 총개수 -->
	<select id="sch_commCount" parameterType="Integer" resultType="Integer">
		SELECT count(*)
		FROM SCH_CO
		WHERE S_NO = #{s_no}
	</select>
	
	<!-- 댓글 리스트 불러오기 -->
	<select id="schCommentList" parameterType="Integer" resultMap="schCommentRes">
		SELECT *
		FROM SCH_CO
		WHERE S_NO = #{s_no}
		ORDER BY S_CO_NO DESC
	</select>
	
	<!-- 댓글 쓰기 -->
	<insert id="schCommentWrite" parameterType="schComment">
		INSERT INTO SCH_CO(S_NO, M_EMAIL, S_CO_CON, S_CO_DATE, S_CO_NO)
		VALUES(#{s_no}, #{m_email}, #{s_co_con}, sysdate, S_CO_NO_SEQ.NEXTVAL)
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="schCommentDelete" parameterType="Integer">
		DELETE FROM SCH_CO
		WHERE S_CO_NO = #{s_co_no}
	</delete>
	

 </mapper>